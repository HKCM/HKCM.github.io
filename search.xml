<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bash基础入门（11）临时文件mktemp和trap</title>
      <link href="2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%8811%EF%BC%89%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6mktemp%E5%92%8Ctrap/"/>
      <url>2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%8811%EF%BC%89%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6mktemp%E5%92%8Ctrap/</url>
      
        <content type="html"><![CDATA[<p>描述: 临时文件安全性以及mktemp和trap的使用</p><a id="more"></a><h3 id="mktemp"><a href="#mktemp" class="headerlink" title="mktemp"></a>mktemp</h3><p><code>mktemp</code>命令可生成的临时文件名为随机值，且权限是只有用户本人可读写的临时文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mktemp</span><br><span class="line">/tmp/tmp.4GcsWSG4vj</span><br><span class="line"></span><br><span class="line">$ ls -l /tmp/tmp.4GcsWSG4vj</span><br><span class="line">-rw------- 1 ruanyf ruanyf 0 12月 28 12:49 /tmp/tmp.4GcsWSG4vj</span><br></pre></td></tr></table></figure><p>Bash 脚本使用<code>mktemp</code>命令的用法如下.为了确保临时文件创建成功，<code>mktemp</code>命令后面最好使用 <code>OR</code>运算符（||），保证创建失败时退出脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">TMPFILE=$(mktemp) || exit 1</span><br><span class="line">echo &quot;Our temp file is $TMPFILE&quot;</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>-d: 参数可以创建一个临时目录。</li><li>-p: 参数可以指定临时文件所在的目录。默认是使用$TMPDIR环境变量指定的目录，如果这个变量没设置，那么使用/tmp目录。</li><li>-t: 参数可以指定临时文件的文件名模板，模板的末尾必须至少包含三个连续的X字符，表示随机字符，建议至少使用六个X。默认的文件名模板是tmp.后接十个随机字符。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ TMPDIR=$(mktemp -d)</span><br><span class="line">$ echo $&#123;TMPDIR&#125;</span><br><span class="line">/tmp/tmp.Wcau5UjmN6</span><br><span class="line"></span><br><span class="line">$ mktemp -p /home/ruanyf/</span><br><span class="line">/home/ruanyf/tmp.FOKEtvs2H3</span><br><span class="line"></span><br><span class="line">$ mktemp -t mytemp.XXXXXXX</span><br><span class="line">/tmp/mytemp.yZ1HgZV</span><br></pre></td></tr></table></figure></li></ul><h3 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h3><p><code>trap</code>命令用来在 Bash 脚本中响应系统信号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ trap -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure><p><code>trap</code>的命令格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trap [动作] [信号1] [信号2] ...</span><br></pre></td></tr></table></figure><p>上面代码中，“动作”是一个 Bash 命令，“信号”常用的有以下几个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HUP：编号1，脚本与所在的终端脱离联系。</span><br><span class="line">INT：编号2，用户按下 Ctrl + C，意图让脚本终止运行。</span><br><span class="line">QUIT：编号3，用户按下 Ctrl + 斜杠，意图退出脚本。</span><br><span class="line">KILL：编号9，该信号用于杀死进程。</span><br><span class="line">TERM：编号15，这是kill命令发出的默认信号。</span><br><span class="line">EXIT：编号0，这不是系统信号，而是 Bash 脚本特有的信号，不管什么情况，只要退出脚本就会产生。</span><br></pre></td></tr></table></figure><p><code>trap</code>命令响应EXIT信号的写法如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trap &apos;rm -f &quot;$TMPFILE&quot;&apos; EXIT</span><br></pre></td></tr></table></figure><p>上面命令中，脚本遇到<code>EXIT</code>信号时，就会执行<code>rm -f &quot;$TMPFILE&quot;</code>。</p><p><code>trap</code> 命令的常见使用场景，就是在 Bash 脚本中指定退出时执行的清理命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">trap &apos;rm -f &quot;$TMPFILE&quot;&apos; EXIT</span><br><span class="line"></span><br><span class="line">TMPFILE=$(mktemp) || exit 1</span><br><span class="line">ls /etc &gt; $TMPFILE</span><br><span class="line">if grep -qi &quot;kernel&quot; $TMPFILE; then</span><br><span class="line">  echo &apos;find&apos;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>上面代码中，不管是脚本正常执行结束，还是用户按 <code>Ctrl + C</code> 终止，都会产生<code>EXIT</code>信号，从而触发删除临时文件。</p><p><strong>注意，<code>trap</code>命令必须放在脚本的开头。否则，它上方的任何命令导致脚本退出，都不会被它捕获。</strong></p><p>如果<code>trap</code>需要触发多条命令，可以封装一个 Bash 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function egress &#123;</span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  command3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trap egress EXIT</span><br></pre></td></tr></table></figure><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> shell技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（10）脚本设置set和shopt</title>
      <link href="2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%8810%EF%BC%89%E8%84%9A%E6%9C%AC%E8%AE%BE%E7%BD%AE/"/>
      <url>2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%8810%EF%BC%89%E8%84%9A%E6%9C%AC%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>描述: 脚本设置set,shopt和排错</p><a id="more"></a><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><code>set</code>命令用来修改子 Shell 环境的运行参数，即定制环境。一共有十几个参数可以定制，<a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html" target="_blank" rel="noopener">官方手册</a>有完整清单，本章介绍其中最常用的几个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set -u # 脚本中遇到未定义时报错并退出</span><br><span class="line">set -x # 运行代码前先将代码输出，排错推荐</span><br><span class="line"></span><br><span class="line"># 到 -e遇到管道命令时只有管道的最后命令成功-e就会认为成功</span><br><span class="line">set -e # 返回值不为0时终止脚本</span><br><span class="line">set -o pipefail # 解决-e的管道问题</span><br></pre></td></tr></table></figure><p>如果命令可能失败，但是希望继续运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">command || true</span><br><span class="line"># 或在某段代码前暂时关闭set -e</span><br><span class="line">set +e</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">set -e</span><br></pre></td></tr></table></figure><p>最后推荐，写脚本时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set -euxo pipefail</span><br><span class="line"># 或</span><br><span class="line">set -eux</span><br><span class="line">set -o pipefail</span><br></pre></td></tr></table></figure><h3 id="shopt"><a href="#shopt" class="headerlink" title="shopt"></a>shopt</h3><p><code>set</code>是从 <code>Ksh</code> 继承的，属于 <code>POSIX</code> 规范的一部分，而<code>shopt</code>是 <code>Bash</code> 特有的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ shopt         # 查看所有参数的状态</span><br><span class="line">$ shopt &lt;p&gt;     # 查看所有参数p的状态</span><br><span class="line"></span><br><span class="line">$ shopt -s &lt;p&gt;  # 开启参数p</span><br><span class="line">$ shopt -u &lt;p&gt;  # 关闭参数p</span><br></pre></td></tr></table></figure><p>目前我还是习惯用set,运行脚本前使用<code>bash -n script</code>可以检查脚本语法是否正确</p><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> shell技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（9）函数</title>
      <link href="2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%889%EF%BC%89%E5%87%BD%E6%95%B0/"/>
      <url>2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%889%EF%BC%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>描述: Bash脚本中的函数</p><a id="more"></a><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>函数定义一定要在函数使用之前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function today() &#123;</span><br><span class="line">  echo -n &quot;Today&apos;s date is: &quot;</span><br><span class="line">  date +&quot;%A, %B %-d, %Y&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function func_return_value &#123;</span><br><span class="line">  return 10</span><br><span class="line">&#125;</span><br><span class="line">$ func_return_value</span><br><span class="line">$ echo &quot;Value returned by function is: $?&quot;</span><br><span class="line">Value returned by function is: 10</span><br></pre></td></tr></table></figure><p>函数内变量<code>local</code>,很好理解函数内变量只能被函数使用，非函数内变量都是全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line">foo=0</span><br><span class="line">function fn () &#123;</span><br><span class="line">  local bar=0</span><br><span class="line">  bar=1</span><br><span class="line">  foo=1</span><br><span class="line">  echo &quot;fn: foo = $foo&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn</span><br><span class="line">echo &quot;global: foo = $foo&quot;</span><br></pre></td></tr></table></figure><p>查看现有函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有函数和定义</span><br><span class="line">$ declare -f </span><br><span class="line"></span><br><span class="line"># 查看所有函数</span><br><span class="line">$ declare -F </span><br><span class="line"></span><br><span class="line"># 查看指定函数</span><br><span class="line">$ declare -f function</span><br></pre></td></tr></table></figure><p>删除函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset -f functionName</span><br></pre></td></tr></table></figure><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> shell技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（8）循环语句</title>
      <link href="2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%888%EF%BC%89%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%888%EF%BC%89%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>描述: while</p><a id="more"></a><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">number=0</span><br><span class="line">while [ &quot;$number&quot; -lt 10 ]; do</span><br><span class="line">  echo &quot;Number = $number&quot;</span><br><span class="line">  number=$((number + 1))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="until"><a href="#until" class="headerlink" title="until"></a>until</h3><p>until循环与while循环恰好相反，只要不符合判断条件（判断条件失败），就不断循环执行指定的语句。一旦符合判断条件，就退出循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">number=0</span><br><span class="line">until [ &quot;$number&quot; -ge 10 ]; do</span><br><span class="line">  echo &quot;Number = $number&quot;</span><br><span class="line">  number=$((number + 1))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="for…in循环"><a href="#for…in循环" class="headerlink" title="for…in循环"></a>for…in循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in $(ls *.md); do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (( i=0; i&lt;5; i=i+1 )); do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="break，continue"><a href="#break，continue" class="headerlink" title="break，continue"></a>break，continue</h3><p><code>break</code>命令立即终止循环，程序继续执行循环块之后的语句，即不再执行剩下的循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">for number in 1 2 3 4 5 6</span><br><span class="line">do</span><br><span class="line">  echo &quot;number is $number&quot;</span><br><span class="line">  if [ &quot;$number&quot; = &quot;3&quot; ]; then</span><br><span class="line">    break</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>上面例子只会打印3行结果。一旦变量<code>$number</code>等于3，就会跳出循环，不再继续执行。</p><p><code>continue</code>命令立即终止本轮循环，开始执行下一轮循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">while read -p &quot;What file do you want to test?&quot; filename</span><br><span class="line">do</span><br><span class="line">  if [ ! -e &quot;$filename&quot; ]; then</span><br><span class="line">    echo &quot;The file does not exist.&quot;</span><br><span class="line">    continue</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  echo &quot;You entered a valid file..&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p><code>select</code>结构主要用来生成简单的菜单。它的语法与<code>for...in</code>循环基本一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;Which Operating System do you like?&quot;</span><br><span class="line"></span><br><span class="line">select os in Ubuntu LinuxMint Windows8 Windows7 WindowsXP</span><br><span class="line">do</span><br><span class="line">  case $os in</span><br><span class="line">    &quot;Ubuntu&quot;|&quot;LinuxMint&quot;)</span><br><span class="line">      echo &quot;I also use $os.&quot;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;Windows8&quot; | &quot;Windows7&quot; | &quot;WindowsXP&quot;)</span><br><span class="line">      echo &quot;Why don&apos;t you try Linux?&quot;</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">      echo &quot;Invalid entry.&quot;</span><br><span class="line">      break</span><br><span class="line">    ;;</span><br><span class="line">  esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> shell技巧 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（7）条件判断if和case</title>
      <link href="2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%887%EF%BC%89%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%ADif%E5%92%8Ccase/"/>
      <url>2020/11/11/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%887%EF%BC%89%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%ADif%E5%92%8Ccase/</url>
      
        <content type="html"><![CDATA[<p>描述: if和case</p><a id="more"></a><h3 id="if-结构"><a href="#if-结构" class="headerlink" title="if 结构"></a>if 结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if commands; then</span><br><span class="line">  commands</span><br><span class="line">[elif commands; then</span><br><span class="line">  commands...]</span><br><span class="line">[else</span><br><span class="line">  commands]</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>if 还能与逻辑运算结合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用否定操作符!时，最好用圆括号确定转义的范围 -a </span><br><span class="line">if [ ! \( $INT -ge $MIN_VAL -a $INT -le $MAX_VAL \) ]; then</span><br><span class="line">    echo &quot;$INT is outside $MIN_VAL to $MAX_VAL.&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$INT is in range.&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>AND运算：符号&amp;&amp;，也可使用参数-a。<br>OR运算：符号||，也可使用参数-o。<br>NOT运算：符号!。</p><h3 id="文件和目录判定"><a href="#文件和目录判定" class="headerlink" title="文件和目录判定"></a>文件和目录判定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ -e filename ]  如果 filename存在，则为真  [ -e /var/log/syslog ]</span><br><span class="line">[ -d filename ]  如果 filename为目录，则为真  [ -d /tmp/mydir ]</span><br><span class="line">[ -f filename ]  如果 filename为常规文件，则为真  [ -f /usr/bin/grep ]</span><br><span class="line">[ -L filename ]  如果 filename为符号链接，则为真  [ -L /usr/bin/grep ]</span><br><span class="line">[ -r filename ]  如果 filename可读，则为真  [ -r /var/log/syslog ]</span><br><span class="line">[ -w filename ]  如果 filename可写，则为真  [ -w /var/mytmp.txt ]</span><br><span class="line">[ -x filename ]  如果 filename可执行，则为真  [ -L /usr/bin/grep ]</span><br><span class="line">[ filename1 -nt filename2 ] 如果 filename1比 filename2新，则为真  [ /tmp/install/etc/services -nt /etc/services ]</span><br><span class="line">[ filename1 -ot filename2 ] 如果 filename1比 filename2旧，则为真  [ /boot/bzImage -ot arch/i386/boot/bzImage ]</span><br></pre></td></tr></table></figure><h3 id="字符串比较运算符"><a href="#字符串比较运算符" class="headerlink" title="字符串比较运算符"></a>字符串比较运算符</h3><p>请注意引号的使用，这是防止空格扰乱代码的好方法</p><p><code>[[]]</code> 和 <code>[]</code>的区别是双括号内支持正则表达式, <code>=~</code>是正则比较运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ string ] 如果string不为空（长度大于0），则判断为真 [ &quot;$&#123;myvar1&#125;&quot; ]</span><br><span class="line">[ -z string ] 如果 string长度为零，则为真  [ -z &quot;$&#123;myvar1&#125;&quot; ]</span><br><span class="line">[ -n string ] 如果 string长度非零，则为真  [ -n &quot;$&#123;myvar1&#125;&quot; ]</span><br><span class="line">[ string1 = string2 ] 如果 string1与 string2相同，则为真  [ &quot;$&#123;myvar1&#125;&quot; = &quot;$&#123;myvar2&#125;&quot; ]</span><br><span class="line">[ string1 == string2 ] 如果 string1与 string2相同，则为真  [ &quot;$&#123;myvar1&#125;&quot; == &quot;$&#123;myvar2&#125;&quot; ]</span><br><span class="line">[ string1 != string2 ] 如果 string1与 string2不同，则为真  [ &quot;$&#123;myvar1&#125;&quot; != &quot;$&#123;myvar2&#125;&quot; ]</span><br><span class="line">[[ string1 =~ string2 ]] 如果 string2是 string1的一部分，则为真  [[ &quot;$&#123;myvar1&#125;&quot; =~ &quot;$&#123;myvar2&#125;&quot; ]]</span><br><span class="line">[[ string1 = *string2* ]] 如果 string2是 string1的一部分，则为真  [[ &quot;$&#123;myvar1&#125;&quot; =~ *&quot;$&#123;myvar2&#125;&quot;* ]]</span><br></pre></td></tr></table></figure><h3 id="算术比较运算符"><a href="#算术比较运算符" class="headerlink" title="算术比较运算符"></a>算术比较运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ num1 -eq num2 ] 等于 [ 3 -eq $&#123;mynum&#125; ]</span><br><span class="line">[ num1 -ne num2 ] 不等于 [ 3 -ne $&#123;mynum&#125; ]</span><br><span class="line">[ num1 -lt num2 ] 小于 [ 3 -lt $&#123;mynum&#125; ]</span><br><span class="line">[ num1 -le num2 ] 小于或等于 [ 3 -le $&#123;mynum&#125; ]</span><br><span class="line">[ num1 -gt num2 ] 大于 [ 3 -gt $&#123;mynum&#125; ]</span><br><span class="line">[ num1 -ge num2 ] 大于或等于 [ 3 -ge $&#123;mynum&#125; ]</span><br></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">case expression in</span><br><span class="line">  pattern )</span><br><span class="line">    commands ;;</span><br><span class="line">  pattern )</span><br><span class="line">    commands ;;</span><br><span class="line">  * )</span><br><span class="line">    commands ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>case的匹配模式可以使用各种通配符，下面是一些例子。</p><ul><li>a)：匹配a。</li><li>a|b)：匹配a或b。</li><li>[[:alpha:]])：匹配单个字母。</li><li>???)：匹配3个字符的单词。</li><li>*.txt)：匹配.txt结尾。</li><li>*)：匹配任意输入，通过作为case结构的最后一个模式。</li></ul><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> shell技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（6）脚本基础参数及用户输入</title>
      <link href="2020/11/10/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%886%EF%BC%89%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80%E5%8F%82%E6%95%B0%E5%8F%8A%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/"/>
      <url>2020/11/10/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%886%EF%BC%89%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80%E5%8F%82%E6%95%B0%E5%8F%8A%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>描述: Bash脚本入门</p><a id="more"></a><h3 id="Shebang-行"><a href="#Shebang-行" class="headerlink" title="Shebang 行"></a>Shebang 行</h3><p>  脚本的第一行通常是指定解释器，Bash 脚本的解释器一般是<code>/bin/sh</code>或<code>/bin/bash</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># 或者</span><br><span class="line">#!/bin/bash</span><br></pre></td></tr></table></figure><p>  如果 Bash 解释器不放在目录<code>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br></pre></td></tr></table></figure><p>  通过环境变量寻找<code>bash</code>所在位置并执行</p><h3 id="脚本执行位置"><a href="#脚本执行位置" class="headerlink" title="脚本执行位置"></a>脚本执行位置</h3><p>当写了一个经常使用的脚本时，可以在主目录新建一个<code>~/bin</code>子目录，专门存放可执行脚本，然后把<code>~/bin</code>加入<code>$PATH</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:~/bin</span><br></pre></td></tr></table></figure><p>上面命令改变环境变量<code>$PATH</code>，将<code>~/bin</code>添加到<code>$PATH</code>的末尾。可以将这一行加到<code>~/.bashrc</code>文件里面，然后重新加载一次<code>.bashrc</code>，这个配置就可以生效了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure><p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ script.sh</span><br></pre></td></tr></table></figure><h3 id="脚本参数"><a href="#脚本参数" class="headerlink" title="脚本参数"></a>脚本参数</h3><p>  脚本文件内部，可以使用特殊变量，引用参数。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`$0`：脚本文件名，即script.sh。</span><br><span class="line">`$1~$9`：对应脚本的第一个参数到第九个参数。</span><br><span class="line">`$#`：参数的总数。</span><br><span class="line">`$@`：全部的参数，参数之间使用空格分隔。</span><br><span class="line">`$*`：全部的参数，参数之间使用变量$IFS值的第一个字符分隔，默认为空格，但是可以自定义。</span><br></pre></td></tr></table></figure></p><p>  下面是一个脚本内部读取命令行参数的例子。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># script.sh</span><br><span class="line"></span><br><span class="line">echo &quot;全部参数：&quot; $@</span><br><span class="line">echo &quot;命令行参数数量：&quot; $#</span><br><span class="line">echo &apos;$0 = &apos; $0</span><br><span class="line">echo &apos;$1 = &apos; $1</span><br><span class="line">echo &apos;$2 = &apos; $2</span><br><span class="line">echo &apos;$3 = &apos; $3</span><br></pre></td></tr></table></figure></p><p>  执行结果如下。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./script.sh a b c</span><br><span class="line">全部参数：a b c</span><br><span class="line">命令行参数数量：3</span><br><span class="line">$0 =  script.sh</span><br><span class="line">$1 =  a</span><br><span class="line">$2 =  b</span><br><span class="line">$3 =  c</span><br></pre></td></tr></table></figure></p><p>  用户可以输入任意数量的参数，利用<code>for</code>循环，可以读取每一个参数。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in &quot;$@&quot;; do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h3 id="getopts-命令"><a href="#getopts-命令" class="headerlink" title="getopts 命令"></a>getopts 命令</h3><p>  <code>getopts</code>命令用在脚本内部，可以解析复杂的脚本命令行参数，通常与<code>while</code>循环一起使用，取出脚本所有的带有前置连词线（-）的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">while getopts &apos;lhsa:&apos; OPTION; do</span><br><span class="line">  case &quot;$OPTION&quot; in</span><br><span class="line">    l) echo &quot;linuxconfig&quot;;;</span><br><span class="line">    s) echo &quot;s stands for s&quot;;;</span><br><span class="line">    a) avalue=&quot;$OPTARG&quot;</span><br><span class="line">       echo &quot;The value provided is $OPTARG&quot;</span><br><span class="line">       ;;</span><br><span class="line">    h) echo &quot;script usage: $(basename $0) [-l] [-s] [-h] [-a somevalue]&quot; &gt;&amp;2 ;;</span><br><span class="line">    *)</span><br><span class="line">      echo &quot;script usage: $(basename $0) [-l] [-s] [-h] [-a somevalue]&quot; &gt;&amp;2 # 消息重定向到标准错误里面</span><br><span class="line">      exit 1</span><br><span class="line">      ;;</span><br><span class="line">  esac</span><br><span class="line">done</span><br><span class="line">shift &quot;$(($OPTIND - 1))&quot; # 移除参数</span><br></pre></td></tr></table></figure><h3 id="read-命令接受用户输入"><a href="#read-命令接受用户输入" class="headerlink" title="read 命令接受用户输入"></a>read 命令接受用户输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo -n &quot;输入一些文本 &gt; &quot;</span><br><span class="line">read text</span><br><span class="line">echo &quot;你的输入：$text&quot;</span><br><span class="line"></span><br><span class="line">常用选项</span><br><span class="line"># -t 设置等待时间</span><br><span class="line"># -p 设置提示信息</span><br><span class="line"># -s 使得用户的输入不显示在屏幕上，这常常用于输入密码或保密信息。</span><br></pre></td></tr></table></figure><p>read命令除了读取键盘输入，可以用来读取文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">filename=&apos;/etc/hosts&apos;</span><br><span class="line"></span><br><span class="line">while read myline</span><br><span class="line">do</span><br><span class="line">  echo &quot;$myline&quot;</span><br><span class="line">done &lt; $filename</span><br></pre></td></tr></table></figure><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> shell技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（5）history</title>
      <link href="2020/11/10/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%885%EF%BC%89history/"/>
      <url>2020/11/10/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%885%EF%BC%89history/</url>
      
        <content type="html"><![CDATA[<p>描述: 介绍history命令</p><a id="more"></a><ol><li><p>history<br><code>history</code>命令能显示操作历史，即用户目录下<code>.bash_history</code>文件的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ history     # 能显示过去执行过的命令</span><br><span class="line">$ history -c  # 清除历史操作</span><br></pre></td></tr></table></figure></li><li><p><code>HISTTIMEFORMAT</code>环境变量</p><p>通过设置<code>HISTTIMEFORMAT</code>环境变量，可以让<code>history</code>显示操作时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 将HISTTIMEFORMAT写入/etc/profile可以全局通用</span><br><span class="line">$ echo &apos;export HISTTIMEFORMAT=&quot;%F %T  `whoami`: &quot;&apos; &gt;&gt; /etc/profile &amp;&amp; source /etc/profile</span><br><span class="line"></span><br><span class="line">HISTTIMEFORMAT=&quot;%Y-%m-%d:%H-%M-%S `whoami`:  &quot;    #记录每条历史命令的执行时间和执行者        </span><br><span class="line"></span><br><span class="line">export HISTTIMEFORMAT    # 仅对当前用户有效，应设置全局环境变量/etc/profile或用户.bashrc</span><br><span class="line"></span><br><span class="line"># 其中： date +%Y-%m-%d    ==2017-06-09</span><br><span class="line"># </span><br><span class="line"># %Y:4位数的年份；        </span><br><span class="line"># </span><br><span class="line"># %m:2位数的月份数；        </span><br><span class="line"># </span><br><span class="line"># %d:2位数的一个月中的日期数；        </span><br><span class="line"># </span><br><span class="line"># %H：2位数的小时数（24小时制）；        </span><br><span class="line"># </span><br><span class="line"># %M：2位数的分钟数；        </span><br><span class="line"># </span><br><span class="line"># %S：2位数的秒数</span><br></pre></td></tr></table></figure></li><li><p>size</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HISTFILESIZE=2000   # 设置保存历史命令的文件大小        </span><br><span class="line"></span><br><span class="line">HISTSIZE=2000       # 保存历史命令条数        </span><br><span class="line"></span><br><span class="line">export HISTSIZE=0   # 将不保存操作记录</span><br></pre></td></tr></table></figure></li></ol><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> shell技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（4）快捷键</title>
      <link href="2020/11/10/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%884%EF%BC%89%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2020/11/10/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%884%EF%BC%89%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>描述: Bash命令行快捷键</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+l:清除屏幕</span><br><span class="line">Ctrl+a:跳到本行的行首</span><br><span class="line">Ctrl+e:跳到页尾</span><br><span class="line">Ctrl+u:删除当前光标前面的文字 （还有剪切功能）</span><br><span class="line">Ctrl+k:删除当前光标后面的文字(还有剪切功能)</span><br><span class="line">Ctrl+w:删除当前光标前一个单词</span><br><span class="line">Ctrl+y:粘贴</span><br><span class="line">Ctrl+c:终止当前命令</span><br><span class="line">Ctrl+d:删除当前字符，没有字符时会退出shell</span><br><span class="line">Alt+f:移动光标到后一个单词</span><br><span class="line">Alt+b:移动光标到前一个单词</span><br></pre></td></tr></table></figure><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（3）字符串</title>
      <link href="2020/11/09/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2020/11/09/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>描述:Bash基础入门（3）之字符串</p><a id="more"></a><h3 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a>字符串的长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ myPath=/home/cam/book/long.file.name</span><br><span class="line">$ echo $&#123;#myPath&#125;</span><br><span class="line">29</span><br></pre></td></tr></table></figure><h3 id="子字符串"><a href="#子字符串" class="headerlink" title="子字符串"></a>子字符串</h3><p>语法<code>${varname:offset:length}</code>返回变量<code>$varname</code>的子字符串，从位置<code>offset</code>开始（从0开始计算），长度为<code>length</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ count=frogfootman</span><br><span class="line">$ echo $&#123;count:4:4&#125;</span><br><span class="line">foot</span><br><span class="line">$ echo $&#123;count:4&#125;</span><br><span class="line">footman</span><br><span class="line"></span><br><span class="line">$ foo=&quot;This string is long.&quot;</span><br><span class="line">$ echo $&#123;foo: -5&#125;</span><br><span class="line">long.</span><br><span class="line">$ echo $&#123;foo: -5:2&#125;</span><br><span class="line">lo</span><br><span class="line">$ echo $&#123;foo: -5:-2&#125;</span><br><span class="line">lon</span><br></pre></td></tr></table></figure><h3 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h3><ol><li><p>字符串头部的模式匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 如果 pattern 匹配变量 variable 的开头，</span><br><span class="line"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span><br><span class="line">$&#123;variable#pattern&#125;</span><br><span class="line"></span><br><span class="line"># 如果 pattern 匹配变量 variable 的开头，</span><br><span class="line"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span><br><span class="line">$&#123;variable##pattern&#125;</span><br><span class="line"></span><br><span class="line">$ myPath=/home/cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ echo $&#123;myPath#/*/&#125;</span><br><span class="line">cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ echo $&#123;myPath##/*/&#125;</span><br><span class="line">long.file.name</span><br><span class="line"></span><br><span class="line"># 示例：匹配文件名</span><br><span class="line">$ path=/home/cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ echo $&#123;path##*/&#125;</span><br><span class="line">long.file.name</span><br><span class="line"></span><br><span class="line"># 示例：匹配替换</span><br><span class="line"># 模式必须出现在字符串的开头</span><br><span class="line">$&#123;variable/#pattern/string&#125;</span><br><span class="line"></span><br><span class="line">$ foo=JPG.JPG</span><br><span class="line">$ echo $&#123;foo/#JPG/jpg&#125;</span><br><span class="line">jpg.JPG</span><br></pre></td></tr></table></figure><p>如果匹配不成功，则返回原始字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ phone=&quot;555-456-1414&quot;</span><br><span class="line">$ echo $&#123;phone#444&#125;</span><br><span class="line">555-456-1414</span><br></pre></td></tr></table></figure></li><li><p>字符串尾部的模式匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 如果 pattern 匹配变量 variable 的结尾，</span><br><span class="line"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span><br><span class="line">$&#123;variable%pattern&#125;</span><br><span class="line"></span><br><span class="line"># 如果 pattern 匹配变量 variable 的结尾，</span><br><span class="line"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span><br><span class="line">$&#123;variable%%pattern&#125;</span><br><span class="line"></span><br><span class="line">$ path=/home/cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ echo $&#123;path%.*&#125;</span><br><span class="line">/home/cam/book/long.file</span><br><span class="line"></span><br><span class="line">$ echo $&#123;path%%.*&#125;</span><br><span class="line">/home/cam/book/long</span><br><span class="line"></span><br><span class="line"># 示例：匹配目录</span><br><span class="line">$ path=/home/cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ echo $&#123;path%/*&#125;</span><br><span class="line">/home/cam/book</span><br><span class="line"></span><br><span class="line"># 示例：匹配替换</span><br><span class="line"># 模式必须出现在字符串的结尾</span><br><span class="line">$&#123;variable/%pattern/string&#125;</span><br><span class="line"></span><br><span class="line">$ foo=JPG.JPG</span><br><span class="line">$ echo $&#123;foo/%JPG/jpg&#125;</span><br><span class="line">JPG.jpg</span><br></pre></td></tr></table></figure></li><li><p>任意位置的模式匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 如果 pattern 匹配变量 variable 的一部分，</span><br><span class="line"># 最长匹配（贪婪匹配）的那部分被 string 替换，但仅替换第一个匹配</span><br><span class="line">$&#123;variable/pattern/string&#125;</span><br><span class="line"></span><br><span class="line"># 如果 pattern 匹配变量 variable 的一部分，</span><br><span class="line"># 最长匹配（贪婪匹配）的那部分被 string 替换，所有匹配都替换</span><br><span class="line">$&#123;variable//pattern/string&#125;</span><br><span class="line"></span><br><span class="line">$ path=/home/cam/foo/foo.name</span><br><span class="line"></span><br><span class="line">$ echo $&#123;path/foo/bar&#125;</span><br><span class="line">/home/cam/bar/foo.name</span><br><span class="line"></span><br><span class="line">$ echo $&#123;path//foo/bar&#125;</span><br><span class="line">/home/cam/bar/bar.name</span><br><span class="line"></span><br><span class="line"># 示例：将分隔符从:换成换行符</span><br><span class="line">$ echo -e $&#123;PATH//:/&apos;\n&apos;&#125;</span><br><span class="line">/usr/local/bin</span><br><span class="line">/usr/bin</span><br><span class="line">/bin</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>改变大小写<br>下面的语法可以改变变量的大小写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 转为大写</span><br><span class="line">$&#123;varname^^&#125;</span><br><span class="line"></span><br><span class="line"># 转为小写</span><br><span class="line">$&#123;varname,,&#125;</span><br><span class="line">下面是一个例子。</span><br><span class="line"></span><br><span class="line">$ foo=heLLo</span><br><span class="line">$ echo $&#123;foo^^&#125;</span><br><span class="line">HELLO</span><br><span class="line">$ echo $&#123;foo,,&#125;</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></li></ol><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（2）变量相关</title>
      <link href="2020/11/09/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89%E5%8F%98%E9%87%8F%E7%9B%B8%E5%85%B3/"/>
      <url>2020/11/09/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89%E5%8F%98%E9%87%8F%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>描述:Bash基础入门（2）之环境变量</p><a id="more"></a><h3 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ env</span><br><span class="line"># 或者</span><br><span class="line">$ printenv</span><br></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>定义变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ variable=value          # 定义变量</span><br><span class="line">$ myvar=&quot;hello world&quot;     # 如果变量的值包含空格，则必须将值放在引号中</span><br><span class="line">$ e=$(ls -l foo.txt)      # 变量值可以是命令的执行结果</span><br><span class="line">$ foo=1;bar=2             # 定义多个变量</span><br></pre></td></tr></table></figure><p>注意，变量区分大小写，变量也会被覆盖</p><h3 id="读取变量"><a href="#读取变量" class="headerlink" title="读取变量"></a>读取变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ a=1</span><br><span class="line">$ echo log_$&#123;a&#125;</span><br><span class="line">log_1</span><br></pre></td></tr></table></figure><p>如果变量的值本身也是变量，可以使用${!varname}的语法，读取最终的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ a=SHELL</span><br><span class="line">$ echo $a</span><br><span class="line">SHELL</span><br><span class="line">$ echo $&#123;!a&#125;</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><h3 id="数组变量"><a href="#数组变量" class="headerlink" title="数组变量"></a>数组变量</h3><p>声明变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ array[0]=a</span><br><span class="line">$ array[1]=b</span><br><span class="line">$ array[2]=c</span><br><span class="line">$ array[3]=d</span><br><span class="line"></span><br><span class="line">$ array=(a b c d)</span><br><span class="line"></span><br><span class="line">$ files=($(ls *.txt))</span><br></pre></td></tr></table></figure><p>读取数组元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 读取单个元素</span><br><span class="line">$ echo $&#123;array[1]&#125;</span><br><span class="line"></span><br><span class="line"># 读取所有元素元素</span><br><span class="line">$ echo $&#123;array[@]&#125;</span><br><span class="line"></span><br><span class="line"># 配合for循环读取所有元素,一定要放在双引号内，避免数组中元素有空格出现意料之外的结果</span><br><span class="line">for i in &quot;$&#123;array[@]&#125;&quot;; do</span><br><span class="line">  echo $&#123;i&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>如果直接读取数组变量不带下标的话，会返回下标为0的元素</p><p>数组长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&#123;#array[@]&#125;</span><br><span class="line">$&#123;#array[*]&#125;</span><br><span class="line"></span><br><span class="line"># 字符串长度也是一样的语法格式</span><br><span class="line">$&#123;#myval&#125;</span><br></pre></td></tr></table></figure><p>提取数组成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 从数组1号位置开始提取3个成员,原数组不变</span><br><span class="line">$&#123;array[@]:1:3&#125;</span><br><span class="line"></span><br><span class="line"># 从数组1号位置开始提取后面所有成员,原数组不变</span><br><span class="line">$&#123;array[@]:1&#125;</span><br><span class="line"></span><br><span class="line">array2=($&#123;array[@]:1&#125;)</span><br></pre></td></tr></table></figure><p>追加数组成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ foo=(a b c)</span><br><span class="line">$ foo+=(d e f)</span><br><span class="line">$ echo $&#123;foo[@]&#125;</span><br><span class="line">a b c d e f</span><br></pre></td></tr></table></figure><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>删除数组和删除变量一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ unset NAME</span><br><span class="line"># 或</span><br><span class="line">$ NAME=&apos;&apos;</span><br></pre></td></tr></table></figure><p>删除数组单个元素会导致该元素为<code>&#39;&#39;</code>,但不会减少数组长度</p><h3 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h3><p>用户创建的变量仅可用于当前 Shell，子 Shell 默认读取不到父 Shell 定义的变量。为了把变量传递给子 Shell，需要使用export命令。这样输出的变量，对于子 Shell 来说就是环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NAME=value</span><br></pre></td></tr></table></figure><p>子 Shell 如果修改继承的变量，不会影响父 Shell。</p><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><ol><li><p>$?<br>为上一个命令的退出码，用来判断上一个命令是否执行成功。返回值是0，表示上一个命令执行成功；如果是非零，上一个命令执行失败。</p></li><li><p>$$<br>为当前 Shell 的进程 ID，这个特殊变量可以用来命名临时文件。Like <code>LOGFILE=/tmp/output_log.$$</code>,有时也可以用来杀死自己</p></li><li><p>$_<br>为上一个命令的最后一个参数，也可以使用<code>esc + .</code></p></li><li><p>$0<br>为当前 Shell 的名称（在命令行直接执行时）或者脚本名（在脚本中执行时）。</p></li></ol><h3 id="变量的默认值"><a href="#变量的默认值" class="headerlink" title="变量的默认值"></a>变量的默认值</h3><p>Bash 提供四个特殊语法，跟变量的默认值有关，目的是保证变量不为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&#123;varname:-word&#125;# 如果变量varname存在且不为空，则返回它的值，否则返回word</span><br><span class="line">$&#123;varname:=word&#125;# 如果变量varname存在且不为空，则返回它的值，否则将它设为word，并且返回word</span><br><span class="line">$&#123;varname:+word&#125;# 如果变量名存在且不为空，则返回word，否则返回空值。</span><br><span class="line">$&#123;varname:?message&#125;# 如果变量varname存在且不为空，则返回它的值，否则打印出varname: message，并中断脚本的执行</span><br><span class="line">filename=$&#123;1:?&quot;filename missing.&quot;&#125; # 如果参数1不存在，就退出脚本并报错。</span><br></pre></td></tr></table></figure><h3 id="declare-命令"><a href="#declare-命令" class="headerlink" title="declare 命令"></a>declare 命令</h3><p>declare命令可以声明一些特殊类型的变量，为变量设置一些限制，比如声明只读类型的变量和整数类型的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">declare OPTION VARIABLE=value</span><br><span class="line"></span><br><span class="line"># -a：声明数组变量。</span><br><span class="line"># -f：输出所有函数定义。</span><br><span class="line"># -F：输出所有函数名。</span><br><span class="line"># -i：声明整数变量。</span><br><span class="line"># -l：声明变量为小写字母。</span><br><span class="line"># -p：查看变量信息。</span><br><span class="line"># -r：声明只读变量。</span><br><span class="line"># -u：声明变量为大写字母。</span><br><span class="line"># -x：该变量输出为环境变量。</span><br><span class="line"></span><br><span class="line">$ declare -x foo# 等同于 export foo</span><br><span class="line"></span><br><span class="line">$ declare -r bar=1# 只读变量不可更改,不可unset</span><br><span class="line"></span><br><span class="line">$ a=10;b=20</span><br><span class="line">$ declare -i c=a*b# 将参数声明整数变量以后，可以直接进行数学运算</span><br><span class="line">$ echo $&#123;c&#125;</span><br><span class="line">200</span><br><span class="line"></span><br><span class="line">$ declare -l foo=“foo”# 变量小写 Mac中不支持</span><br><span class="line">$ declare -u bar=&quot;bar&quot;# 变量大写 Mac中不支持</span><br><span class="line"></span><br><span class="line">$ declare -p a # 输出变量信息</span><br><span class="line">declare -- a=&quot;10&quot;</span><br><span class="line"></span><br><span class="line">$ declare -f# 输出当前环境的所有函数，包括它的定义。</span><br><span class="line">$ declare -F# 输出当前环境的所有函数，包括它的定义</span><br></pre></td></tr></table></figure><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>本文采用知识共享 署名-相同方式共享 3.0协议</p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协&gt;议进行授权。</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash基础入门（1）</title>
      <link href="2020/11/08/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/"/>
      <url>2020/11/08/Bash%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="描述-Bash基础入门（1）"><a href="#描述-Bash基础入门（1）" class="headerlink" title="描述: Bash基础入门（1）"></a>描述: Bash基础入门（1）</h1><a id="more"></a><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p><code>Ctrl + L</code>：清除屏幕并将当前行移到页面顶部。<br><code>Ctrl + C</code>：中止当前正在执行的命令。<br><code>Ctrl + U</code>：从光标位置删除到行首。<br><code>Ctrl + K</code>：从光标位置删除到行尾。<br><code>Ctrl + D</code>：关闭 Shell 会话。<br><code>Tab</code>：自动补全</p><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>分号（<code>;</code>）是命令的结束符，使得一行可以放置多个命令，上一个命令执行结束后，再执行第二个命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 例1</span><br><span class="line">for i in `ls`;do </span><br><span class="line">    echo $i is file name\!;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># 例2</span><br><span class="line">touch file; ls</span><br></pre></td></tr></table></figure><p>例如for循环，例2中，Bash 先执行touch命令，执行完成后，再执行ls命令。</p><p>注意，使用分号时，第二个命令总是接着第一个命令执行，无论touch执行成功或失败。</p><h3 id="amp-amp-和"><a href="#amp-amp-和" class="headerlink" title="&amp;&amp; 和 ||"></a>&amp;&amp; 和 ||</h3><p><code>&amp;&amp;</code>和<code>||</code>可以处理命令之间的执行关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &amp;&amp; echo &quot;Hello&quot;</span><br></pre></td></tr></table></figure><p>表示如果<code>ls</code>命令成功，才运行<code>echo</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 123 || ls</span><br></pre></td></tr></table></figure><p>表示如果<code>touch</code>命令运行失败，才运行<code>ls</code>命令，如果<code>touch</code>成功则不执行<code>ls</code>。</p><h3 id="和-匹配"><a href="#和-匹配" class="headerlink" title="?和*匹配"></a><code>?</code>和<code>*</code>匹配</h3><p><code>?</code>匹配单个字符,<code>*</code>匹配任意数量的任意字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls ?.txt</span><br><span class="line">1.txt 2.txt</span><br><span class="line"></span><br><span class="line">$ ls *.txt</span><br><span class="line">1.txt 2.txt 123.txt</span><br></pre></td></tr></table></figure><p>注意，<code>*</code>不会匹配隐藏文件（以<code>.</code>开头的文件），即<code>ls *</code>不会输出隐藏文件。</p><p>如果要匹配隐藏文件，需要写成<code>.*</code>。</p><h3 id="方括号匹配"><a href="#方括号匹配" class="headerlink" title="方括号匹配"></a>方括号匹配</h3><p>匹配括号之中的任意一个字符。比如，[12345]可以匹配五个数字的任意一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls [12345].txt</span><br><span class="line">1.txt 2.txt</span><br><span class="line"></span><br><span class="line"># 只存在文件 a.txt</span><br><span class="line">$ ls [12345].txt</span><br><span class="line">1.txt</span><br></pre></td></tr></table></figure><p>反向匹配，<code>[^abc]</code>或<code>[!abc]</code>表示匹配除了a、b、c以外的字符.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 存在 111、123、222 三个文件</span><br><span class="line">$ ls ?[!2]?</span><br><span class="line">111</span><br></pre></td></tr></table></figure><p>连续匹配<code>[0-9]</code>,<code>[a-z]</code>,<code>[A-Z]</code>，还有<code>[!1-9]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls demo[0-9].txt</span><br><span class="line">demo1.txt demo3.txt</span><br></pre></td></tr></table></figure><ul><li>[a-z]：所有小写字母。</li><li>[a-zA-Z]：所有小写字母与大写字母。</li><li>[a-zA-Z0-9]：所有小写字母、大写字母与数字。</li><li>[abc]*：所有以a、b、c字符之一开头的文件名。</li><li>program.[co]：文件program.c与文件program.o。</li><li>BACKUP.[0-9][0-9][0-9]：所有以BACKUP.开头，后面是三个数字的文件名。</li></ul><p>注意，如果需要匹配<code>[</code>字符，可以放在方括号内，比如<code>[[aeiou]</code>。如果需要匹配连字号<code>-</code>，只能放在方括号内部的开头或结尾，比如<code>[-aeiou]</code>或<code>[aeiou-]</code></p><h3 id="大括号扩展"><a href="#大括号扩展" class="headerlink" title="大括号扩展"></a>大括号扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 例1,创建3个文件</span><br><span class="line">$ touch &#123;1,2,3&#125;.txt</span><br><span class="line"></span><br><span class="line"># 例2，创建9个文件夹</span><br><span class="line">$ mkdir &#123;1,2,3&#125;/&#123;1,2,3&#125;</span><br><span class="line"></span><br><span class="line"># 例3，嵌套扩展</span><br><span class="line">$ touch 1.&#123;j&#123;p,pe&#125;g,png&#125;</span><br><span class="line">1.jpeg  1.jpg   1.png</span><br><span class="line"></span><br><span class="line"># 例4，for循环连用</span><br><span class="line">for i in &#123;1..4&#125;</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>注意，大括号扩展内部的逗号前后不能有空格。否则，大括号扩展会失效。</p><h3 id="字符"><a href="#字符" class="headerlink" title="$字符"></a><code>$</code>字符</h3><p>Bash将<code>$</code>开头的的词视为变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$SHELL</span><br><span class="line">或</span><br><span class="line">$&#123;SHELL&#125;</span><br></pre></td></tr></table></figure><p>Bash会先返回<code>$(Command)</code>中<code>Command</code>的运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo $(date)</span><br></pre></td></tr></table></figure><h3 id="特别匹配"><a href="#特别匹配" class="headerlink" title="特别匹配"></a>特别匹配</h3><ul><li>[[:alnum:]]：匹配任意英文字母与数字</li><li>[[:alpha:]]：匹配任意英文字母</li><li>[[:blank:]]：空格和 Tab 键。</li><li>[[:cntrl:]]：ASCII 码 0-31 的不可打印字符。</li><li>[[:digit:]]：匹配任意数字 0-9。</li><li>[[:graph:]]：A-Z、a-z、0-9 和标点符号。</li><li>[[:lower:]]：匹配任意小写字母 a-z。</li><li>[[:print:]]：ASCII 码 32-127 的可打印字符。</li><li>[[:punct:]]：标点符号（除了 A-Z、a-z、0-9 的可打印字符）。</li><li>[[:space:]]：空格、Tab、LF（10）、VT（11）、FF（12）、CR（13）。</li><li>[[:upper:]]：匹配任意大写字母 A-Z。</li><li>[[:xdigit:]]：16进制字符（A-F、a-f、0-9）。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有以大写字母开头的文件</span><br><span class="line">$ ls [[:upper:]]*</span><br></pre></td></tr></table></figure></li></ul><h3 id="量词匹配"><a href="#量词匹配" class="headerlink" title="量词匹配"></a>量词匹配</h3><p><code>?(XXX)</code>匹配0个或1个<code>XXX</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 匹配0个或1个.txt</span><br><span class="line">$ ls abc?(.txt)</span><br><span class="line">abc abc.txt</span><br></pre></td></tr></table></figure><p><code>+(XXX)</code>匹配1个或多个<code>XXX</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls abc+(.txt)</span><br><span class="line">abc.txt abc.txt.txt</span><br></pre></td></tr></table></figure><h3 id="引号和转义"><a href="#引号和转义" class="headerlink" title="引号和转义"></a>引号和转义</h3><p><code>&#39;</code>单引号效力最强，会让一切转义失效保留原样。<code>&quot;</code>双引号保留美元符号（<code>$</code>）、反引号（<code>\``）和反斜杠（</code>`）的效力</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ a=1</span><br><span class="line"></span><br><span class="line">$ echo &apos;$a&apos;</span><br><span class="line">$a</span><br><span class="line"></span><br><span class="line"># 双引号使用变量</span><br><span class="line">$ echo &quot;$a&quot;</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"># -e 参数转义</span><br><span class="line">$ echo -e &quot;a\tb&quot;</span><br><span class="line">ab</span><br><span class="line"></span><br><span class="line"># 反引号</span><br><span class="line">$ echo &quot;I&apos;d say: \&quot;hello!\&quot;&quot;</span><br><span class="line">I&apos;d say: &quot;hello!&quot;</span><br><span class="line"></span><br><span class="line"># 输出多行文本</span><br><span class="line">$ echo &quot;hello</span><br><span class="line">world&quot;</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line"></span><br><span class="line"># 单行输出</span><br><span class="line">$ echo $(cal)</span><br><span class="line">一月 2020 日 一 二 三 四 五 六 1 2 3 ... 31</span><br><span class="line"></span><br><span class="line"># 原始格式输出</span><br><span class="line">$ echo &quot;$(cal)&quot;</span><br><span class="line">      一月 2020</span><br><span class="line">日 一 二 三 四 五 六</span><br><span class="line">          1  2  3  4</span><br><span class="line"> 5  6  7  8  9 10 11</span><br><span class="line">12 13 14 15 16 17 18</span><br><span class="line">19 20 21 22 23 24 25</span><br><span class="line">26 27 28 29 30 31</span><br></pre></td></tr></table></figure><p>来自网道项目：<a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a></p><p>署名-相同方式共享（BY-SA）：使用者可以对本创作进行转载、节选、混编、二次创作，可以将其运用于商业用途，唯须署名作者，并且采用本创作的内容必须同样采用本协议进行授权。</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> 基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu别名alias</title>
      <link href="2020/11/08/Ubuntu%E5%88%AB%E5%90%8Dalias/"/>
      <url>2020/11/08/Ubuntu%E5%88%AB%E5%90%8Dalias/</url>
      
        <content type="html"><![CDATA[<h3 id="描述-为命令添加别名"><a href="#描述-为命令添加别名" class="headerlink" title="描述: 为命令添加别名"></a>描述: 为命令添加别名</h3><a id="more"></a><ol><li><p>新建或打开 ~/.bashrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入以下内容，这是git常用的几个命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alias pull="git pull"</span><br><span class="line">alias commit="git commit"</span><br><span class="line">alias push="git push"</span><br><span class="line">alias branch="git branch"</span><br><span class="line">alias check="git checkout"</span><br><span class="line">alias st="git status"</span><br></pre></td></tr></table></figure></li><li><p>让别名立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>让别名永久生效，新建或打开 ~/.bash_profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line">if [ -f ~/.bashrc ]; then</span><br><span class="line">  source ~/.bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>如果别名特别多，我们可以创建单独的<code>~/.alias</code>文件存放别名,并在<code>~/.bashrc</code>中读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ -f ~/.alias ]; then</span><br><span class="line">  source ~/.alias</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>alias相关操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 新增别名 只在当前终端有效</span><br><span class="line">$ alias hw=&apos;echo &quot;hello world&quot;&apos;</span><br><span class="line"></span><br><span class="line"># 查看现有别名</span><br><span class="line">$ alias</span><br><span class="line">alias ll=&apos;ls -al&apos;</span><br><span class="line">alias hw=&apos;echo &quot;hello world&quot;&apos;</span><br><span class="line"></span><br><span class="line"># 取消别名</span><br><span class="line">$ unalias ll</span><br><span class="line"></span><br><span class="line"># 取消所有别名</span><br><span class="line">$ unalias -a</span><br></pre></td></tr></table></figure></li></ol><p>如果别名是写在文件中，即使取消了，重新登陆还是会有</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu为history添加时间戳</title>
      <link href="2020/11/08/Ubuntu%E4%B8%BAhistory%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/"/>
      <url>2020/11/08/Ubuntu%E4%B8%BAhistory%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="描述-为history添加时间戳"><a href="#描述-为history添加时间戳" class="headerlink" title="描述: 为history添加时间戳"></a>描述: 为history添加时间戳</h1><a id="more"></a><h4 id="设置系统环境变量"><a href="#设置系统环境变量" class="headerlink" title="设置系统环境变量"></a>设置系统环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;export HISTTIMEFORMAT=&quot;%F %T  `whoami` &quot;&apos; &gt;&gt; /etc/profile &amp;&amp; source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="时间参数解析"><a href="#时间参数解析" class="headerlink" title="时间参数解析"></a>时间参数解析</h3><ol><li><p>history的历史命令保存在~/.bash_history 文件中   #仅仅对当前用户有效，应设置全局环境变量/etc/profile</p></li><li><p>~/.bashrc文件可添加的history相关的说明        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">HISTFILESIZE=2000      #设置保存历史命令的文件大小        </span><br><span class="line"></span><br><span class="line">HISTSIZE=2000           #保存历史命令条数        </span><br><span class="line"></span><br><span class="line">HISTTIMEFORMAT=&quot;%Y-%m-%d:%H-%M-%S `whoami`:  &quot;    #记录每条历史命令的执行时间和执行者        </span><br><span class="line"></span><br><span class="line">export HISTTIMEFORMAT    </span><br><span class="line"></span><br><span class="line"># 其中： date +%Y-%m-%d    ==2017-06-09</span><br><span class="line"># </span><br><span class="line"># %Y:4位数的年份；        </span><br><span class="line"># </span><br><span class="line"># %m:2位数的月份数；        </span><br><span class="line"># </span><br><span class="line"># %d:2位数的一个月中的日期数；        </span><br><span class="line"># </span><br><span class="line"># %H：2位数的小时数（24小时制）；        </span><br><span class="line"># </span><br><span class="line"># %M：2位数的分钟数；        </span><br><span class="line"># </span><br><span class="line"># %S：2位数的秒数</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell技巧 </tag>
            
            <tag> shell </tag>
            
            <tag> shell命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客中图片插入</title>
      <link href="2020/11/08/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/"/>
      <url>2020/11/08/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="描述-Hexo博客中图片插入"><a href="#描述-Hexo博客中图片插入" class="headerlink" title="描述: Hexo博客中图片插入"></a>描述: Hexo博客中图片插入</h3><a id="more"></a><ol><li>绝对路径</li></ol><p>可以将图片统一放在Hexo根目录的source/images文件夹中，在文章中通过markdown语法访问它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><ol start="2"><li>相对路径</li></ol><p>在Hexo项目根目录中修改<code>_config.yml</code>并找到<code>post_asset_folder</code>字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 将post_asset_folder修改为true</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>之后<code>hexo new article</code>除了会在<code>source/_posts</code>目录下生成同名文章之外，还会有同名文件夹，图片放入文件夹中即可引用</p><p>在文章中引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 插入图片，当图片无法载入时会显示[]内的文字</span><br><span class="line">![](1.png)</span><br></pre></td></tr></table></figure><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure><p>Like this:<br><img src="1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Next主题下添加搜索功能</title>
      <link href="2020/11/08/Hexo-Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>2020/11/08/Hexo-Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="描述-在Next主题下添加搜索功能"><a href="#描述-在Next主题下添加搜索功能" class="headerlink" title="描述: 在Next主题下添加搜索功能"></a>描述: 在Next主题下添加搜索功能</h3><a id="more"></a><p>有两种插件可用，安装一种即可</p><ol><li><p>hexo-generator-search插件<br>在hexo根目录安装<code>hexo-generator-search</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p>hexo-generator-searchdb插件<br>在hexo根目录安装<code>hexo-generator-searchdb</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li></ol><p>附上searchdb的repo: <a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">https://github.com/theme-next/hexo-generator-searchdb</a></p><p>剩下的步骤是一样的</p><p>在hexo根目录修改<code>_config.yml</code>文件,添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path - file path. By default is search.xml. If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.</li><li>field - the search scope you want to search, you can chose:<ul><li>post (Default) - will only cover all the posts of your blog.</li><li>page - will only cover all the pages of your blog.</li><li>all - will cover all the posts and pages of your blog.</li></ul></li><li>content - whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.</li><li>format - the form of the page contents, options are:<ul><li>html (Default) - original html string being minified.</li><li>striptags - original html string being minified, and remove all the tags.</li><li>raw - markdown text of each posts or pages.</li></ul></li></ul><p>最后在next主题的<code>_config.yml</code>文件中修改<code>local_search</code>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim themes/next/_config.yml</span><br><span class="line"></span><br><span class="line"># 找到并修改</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>enable 启用搜索</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu日志</title>
      <link href="2020/11/08/Ubuntu%E6%97%A5%E5%BF%97/"/>
      <url>2020/11/08/Ubuntu%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h3 id="描述-Ubuntu-日志相关"><a href="#描述-Ubuntu-日志相关" class="headerlink" title="描述: Ubuntu 日志相关"></a>描述: Ubuntu 日志相关</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/var/log/messages：常规日志消息</span><br><span class="line">/var/log/boot：系统启动日志</span><br><span class="line">/var/log/debug：调试日志消息</span><br><span class="line">/var/log/auth.log：用户登录和身份验证日志</span><br><span class="line">/var/log/daemon.log：运行squid，ntpd等其他日志消息到这个文件</span><br><span class="line">/var/log/dmesg：Linux内核环缓存日志</span><br><span class="line">/var/log/dpkg.log：所有二进制包日志都包括程序包安装和其他信息</span><br><span class="line">/var/log/faillog：用户登录日志文件失败</span><br><span class="line">/var/log/kern.log：内核日志文件</span><br><span class="line">/var/log/lpr.log：打印机日志文件</span><br><span class="line">/var/log/mail.*：所有邮件服务器消息日志文件</span><br><span class="line">/var/log/mysql.*：MySQL服务器日志文件</span><br><span class="line">/var/log/user.log：所有用户级日志</span><br><span class="line">/var/log/xorg.0.log：X.org日志文件</span><br><span class="line">/var/log/apache2/*：Apache Web服务器日志文件目录</span><br><span class="line">/var/log/lighttpd/*：Lighttpd Web服务器日志文件目录</span><br><span class="line">/var/log/fsck/*：fsck命令日志</span><br><span class="line">/var/log/apport.log：应用程序崩溃报告/日志文件</span><br><span class="line">/var/log/syslog：系统日志</span><br><span class="line">/var/log/ufw：ufw防火墙日志</span><br><span class="line">/var/log/gufw：gufw防火墙日志</span><br></pre></td></tr></table></figure><h3 id="在脚本中写入系统日志"><a href="#在脚本中写入系统日志" class="headerlink" title="在脚本中写入系统日志"></a>在脚本中写入系统日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger –t ScriptName "Hello World"</span><br></pre></td></tr></table></figure><h3 id="在脚本中输出并记录日志"><a href="#在脚本中输出并记录日志" class="headerlink" title="在脚本中输出并记录日志"></a>在脚本中输出并记录日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "somethong wrong" | tee -a /var/log/script_log</span><br></pre></td></tr></table></figure><h3 id="使用cat-tail-more-less和grep命令。"><a href="#使用cat-tail-more-less和grep命令。" class="headerlink" title="使用cat, tail, more,less和grep命令。"></a>使用cat, tail, more,less和grep命令。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat -n /var/log/syslog |grep &quot;key&quot; |more</span><br><span class="line">tail -f /var/log/apport.log</span><br><span class="line">more /var/log/xorg.0.log</span><br><span class="line">cat /var/log/mysql.err</span><br><span class="line">less /var/log/messages</span><br><span class="line">grep -i fail /var/log/boot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础入门 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell提示用户确认操作</title>
      <link href="2020/11/08/shell%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E7%A1%AE%E8%AE%A4%E6%93%8D%E4%BD%9C/"/>
      <url>2020/11/08/shell%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E7%A1%AE%E8%AE%A4%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="描述-shell脚本中提示用户确认操作"><a href="#描述-shell脚本中提示用户确认操作" class="headerlink" title="描述: shell脚本中提示用户确认操作"></a>描述: shell脚本中提示用户确认操作</h3><a id="more"></a><h4 id="例1：确认提示（一次）"><a href="#例1：确认提示（一次）" class="headerlink" title="例1：确认提示（一次）"></a>例1：确认提示（一次）</h4><p>这个示例代码将为确认提示一次，如果你给输入错误，程序会以状态1退出。这个例子将只接受Y或N或YES或NO（不区分大小写）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">read -r -p "Are You Sure? [Y/n] " input</span><br><span class="line"></span><br><span class="line">case $input in</span><br><span class="line">    [yY][eE][sS]|[yY])</span><br><span class="line">echo "Yes"</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">    [nN][oO]|[nN])</span><br><span class="line">echo "No"</span><br><span class="line">       ;;</span><br><span class="line"></span><br><span class="line">    *)</span><br><span class="line">echo "Invalid input..."</span><br><span class="line">exit 1</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h4 id="例2：提示进行确认（输入正常退出，输入错误则需重新输入）"><a href="#例2：提示进行确认（输入正常退出，输入错误则需重新输入）" class="headerlink" title="例2：提示进行确认（输入正常退出，输入错误则需重新输入）"></a>例2：提示进行确认（输入正常退出，输入错误则需重新输入）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">read -r -p "Are You Sure? [Y/n] " input</span><br><span class="line"></span><br><span class="line">case $input in</span><br><span class="line">    [yY][eE][sS]|[yY])</span><br><span class="line">echo "Yes"</span><br><span class="line">exit 1</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">    [nN][oO]|[nN])</span><br><span class="line">echo "No"</span><br><span class="line">exit 1       </span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">    *)</span><br><span class="line">echo "Invalid input..."</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWSEC2获取本机IP</title>
      <link href="2020/11/08/AWSEC2%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAIP/"/>
      <url>2020/11/08/AWSEC2%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAIP/</url>
      
        <content type="html"><![CDATA[<h3 id="描述-在EC2内部获取本机的private-IP和public-IP"><a href="#描述-在EC2内部获取本机的private-IP和public-IP" class="headerlink" title="描述: 在EC2内部获取本机的private IP和public IP"></a>描述: 在EC2内部获取本机的private IP和public IP</h3><a id="more"></a><p>One can use the following curl command to get private IPv4:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://169.254.169.254/latest/meta-data/local-ipv4</span><br></pre></td></tr></table></figure><p>And, to get public IPv4, run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl http://169.254.169.254/latest/meta-data/public-ipv4</span><br><span class="line">curl http://checkip.amazonaws.com</span><br><span class="line">curl icanhazip.com</span><br><span class="line">curl ifconfig.me</span><br><span class="line">wget http://ipecho.net/plain -O - -q</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
          <category> EC2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> EC2 </tag>
            
            <tag> AWS EC2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell获取本机IP</title>
      <link href="2020/11/08/shell%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAIP/"/>
      <url>2020/11/08/shell%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAIP/</url>
      
        <content type="html"><![CDATA[<h3 id="shell获取本机IP"><a href="#shell获取本机IP" class="headerlink" title="shell获取本机IP"></a>shell获取本机IP</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl icanhazip.com</span><br><span class="line">curl ifconfig.me</span><br><span class="line">curl http://checkip.amazonaws.com</span><br><span class="line">wget http://ipecho.net/plain -O - -q</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell获取用户家目录</title>
      <link href="2020/11/08/shell%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%AE%B6%E7%9B%AE%E5%BD%95/"/>
      <url>2020/11/08/shell%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%AE%B6%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="获取用户家目录"><a href="#获取用户家目录" class="headerlink" title="获取用户家目录"></a>获取用户家目录</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $HOME</span><br><span class="line"></span><br><span class="line">env|grep ^HOME=|cut -c 6-</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell函数定义</title>
      <link href="2020/11/08/shell%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/"/>
      <url>2020/11/08/shell%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h3 id="shell函数定义及调用"><a href="#shell函数定义及调用" class="headerlink" title="shell函数定义及调用"></a>shell函数定义及调用</h3><a id="more"></a><ol><li>简单函数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">function sayhello()</span><br><span class="line">&#123;</span><br><span class="line">  echo "Hello,World"</span><br><span class="line">&#125;</span><br><span class="line">sayhello</span><br></pre></td></tr></table></figure><ol start="2"><li>常用的脚本函数，具有提示作用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function usage() &#123;</span><br><span class="line">  echo "Usage:</span><br><span class="line"></span><br><span class="line">./deploy.sh -p &lt;profile&gt; -k &lt;keypair&gt;</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">  ./deploy.sh -p &lt;profile&gt; -k &lt;keypair&gt;</span><br><span class="line">"</span><br><span class="line">  exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while getopts "p:k:h" opt; do</span><br><span class="line">  case "$opt" in</span><br><span class="line">  p) PROFILE="$OPTARG" ;;</span><br><span class="line">  k) KeyName="$OPTARG" ;;</span><br><span class="line">  [?]) usage ;;</span><br><span class="line">  esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ol><p>注意所有函数必须先定义后使用</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell命令 </tag>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本菜单目录实现</title>
      <link href="2020/11/08/shell%E8%84%9A%E6%9C%AC%E8%8F%9C%E5%8D%95%E7%9B%AE%E5%BD%95%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/11/08/shell%E8%84%9A%E6%9C%AC%E8%8F%9C%E5%8D%95%E7%9B%AE%E5%BD%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一个简单shell菜单实现"><a href="#一个简单shell菜单实现" class="headerlink" title="一个简单shell菜单实现"></a>一个简单shell菜单实现</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">cat &lt;&lt; EOF</span><br><span class="line">********please enter your choice:(1-6)****</span><br><span class="line">(1) List you selected directory</span><br><span class="line">(2) Change to you selected directory</span><br><span class="line">(3) Create a new file</span><br><span class="line">(4) Edit you selected file</span><br><span class="line">(5) Remove you selected file.</span><br><span class="line">(6) Exit Menu.</span><br><span class="line">EOF</span><br><span class="line">read -p "Now select the top option to: " input</span><br><span class="line">case $input in </span><br><span class="line">1) ls;;</span><br><span class="line">2) echo "Enter target directory:"</span><br><span class="line">read dir</span><br><span class="line">cd $dir;;</span><br><span class="line">3) echo "Enter a file name:"</span><br><span class="line">read file</span><br><span class="line">touch $file;;</span><br><span class="line">4) echo "Enter a file name:"</span><br><span class="line">read file</span><br><span class="line">vi $file;;</span><br><span class="line">5) echo "Enter a file name:"</span><br><span class="line">read file</span><br><span class="line">rm $file;;</span><br><span class="line">6) echo "Bye"</span><br><span class="line">exit 0;;</span><br><span class="line">*) echo "Invalid input,bye"</span><br><span class="line">exit 1;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>也可以通过<code>while ture</code> 循环菜单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">while true</span><br><span class="line">do</span><br><span class="line">  cat &lt;&lt; EOF</span><br><span class="line">  ********please enter your choice:(1-6)****</span><br><span class="line"></span><br><span class="line">  (1) List you selected directory</span><br><span class="line">  (2) Change to you selected directory</span><br><span class="line">  (3) Create a new file</span><br><span class="line">  (4) Edit you selected file</span><br><span class="line">  (5) Remove you selected file.</span><br><span class="line">  (6) Exit Menu.</span><br><span class="line">  EOF</span><br><span class="line">  read -p "Now select the top option to: " input</span><br><span class="line">  case $input in </span><br><span class="line">  1) ls;;</span><br><span class="line">  2) echo "Enter target directory:"</span><br><span class="line">  read dir</span><br><span class="line">  cd $dir;;</span><br><span class="line">  3) echo "Enter a file name:"</span><br><span class="line">  read file</span><br><span class="line">  touch $file;;</span><br><span class="line">  4) echo "Enter a file name:"</span><br><span class="line">  read file</span><br><span class="line">  vi $file;;</span><br><span class="line">  5) echo "Enter a file name:"</span><br><span class="line">  read file</span><br><span class="line">  rm $file;;</span><br><span class="line">  6) echo "Bye"</span><br><span class="line">  exit 0;;</span><br><span class="line">  *) echo "Invalid input,bye"</span><br><span class="line">  exit 1;;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell命令 </tag>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo疑难</title>
      <link href="2020/11/07/Hexo%E7%96%91%E9%9A%BE/"/>
      <url>2020/11/07/Hexo%E7%96%91%E9%9A%BE/</url>
      
        <content type="html"><![CDATA[<p>描述: 主要记录在配置hexo过程中遇到的问题</p><a id="more"></a><ol><li>部署时<code>hexo d</code>出现问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</span><br></pre></td></tr></table></figure></li></ol><p>node版本太高，我在node v14.15遇到切到v10.10问题解决，虽然出现了warning，hexo对node有一定要求，最好v14以下v10以上</p><ol start="2"><li>迁移</li></ol><p>本身hexo的根目录其实也是一个repo,所以定时push也是好的。</p><p>当使用了主题，并且<code>git add</code>时，可能会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">warning: adding embedded git repository: themes/&lt;hexo-theme-name&gt;</span><br><span class="line">hint: You&apos;ve added another git repository inside your current repository.</span><br><span class="line">hint: Clones of the outer repository will not contain the contents of</span><br><span class="line">hint: the embedded repository and will not know how to obtain it.</span><br><span class="line">hint: If you meant to add a submodule, use:</span><br><span class="line">hint: </span><br><span class="line">hint:   git submodule add &lt;url&gt; themes/&lt;hexo-theme-name&gt;</span><br><span class="line">hint: </span><br><span class="line">hint: If you added this path by mistake, you can remove it from the</span><br><span class="line">hint: index with:</span><br><span class="line">hint: </span><br><span class="line">hint:   git rm --cached themes/&lt;hexo-theme-name&gt;</span><br><span class="line">hint: </span><br><span class="line">hint: See &quot;git help submodule&quot; for more information.</span><br></pre></td></tr></table></figure><p>这时有两个方案<br>    1. 可以按照提示，将相关主题作为子模块<br>    2. 进入该主题目录，删除隐藏的<code>.git</code>文件夹,并且重新<code>git add themes/&lt;hexo-theme-name&gt;/</code></p><ol start="3"><li>主题设置</li></ol><p>这里有位仁兄很详细的next的主题设置</p><p><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502" target="_blank" rel="noopener">https://blog.csdn.net/nightmare_dimple/article/details/86661502</a></p><ol start="4"><li><p>更换电脑clone hexo到本地后<code>hexo server</code>启动主页空白</p><ol><li><p>检查相关的depends是否安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm ls --depth 0 </span><br><span class="line"># 如果没有安装，进入hexo根目录</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>检查hexo根目录下<code>_config.yml</code>的<code>theme</code>字段和<code>themes</code>文件夹中的名字是否一致</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人实践 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo分类和标签</title>
      <link href="2020/11/07/Hexo%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
      <url>2020/11/07/Hexo%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>为Hexo创建分类和标签管理</p><a id="more"></a><ol><li>创建分类</li><li>1 打开命令行，进入博客所在文件夹。执行命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page categories</span><br></pre></td></tr></table></figure></li></ol><p>成功后会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Hexo_blog/source/categories/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-11-07 14:06:16</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>1.2 添加type: “categories”到内容中，添加后是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-11-07 14:06:16</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>1.3 给文章添加“categories”属性<br>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo + GitHub搭建个人博客</span><br><span class="line">date: 2019-10-09 07:17:26</span><br><span class="line">categories:</span><br><span class="line">- 个人实践</span><br><span class="line">tags:</span><br><span class="line">- 个人实践</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>注意：hexo一篇文章只能属于一个分类，也就是说如果在“- 个人实践”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- 个人实践”下的 “-xxx ”分类）。</strong></p><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p><ol start="2"><li>创建“标签”选项</li><li>1 和上面类似，打开命令行，进入博客所在文件夹。执行命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page tags</span><br></pre></td></tr></table></figure></li></ol><p>成功后会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Hexo_blog/source/tags/index.md</span><br></pre></td></tr></table></figure><p>2.2 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-11-07 14:07:08</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “tags”到内容中，添加后是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-11-07 14:07:08</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>2.3 给文章添加“tags”属性<br>打开需要添加标签的文章，为其添加tags属性。下方的tags<code>- 个人实践</code>就是这篇文章的标签了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo + GitHub搭建个人博客</span><br><span class="line">date: 2019-10-09 07:17:26</span><br><span class="line">categories:</span><br><span class="line">- 个人实践</span><br><span class="line">tags:</span><br><span class="line">- 个人实践</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p><ol start="3"><li>修改模版</li></ol><p>我们可以打开scaffolds/post.md文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim scaffolds/post.md</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在tages:上面加入categories:,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。</p><p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p><p>参考链接：<a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener">https://www.jianshu.com/p/e17711e44e00</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人实践 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下ntfs硬盘只读问题</title>
      <link href="2020/11/07/Ubuntu%E4%B8%8Bntfs%E7%A1%AC%E7%9B%98%E5%8F%AA%E8%AF%BB%E9%97%AE%E9%A2%98/"/>
      <url>2020/11/07/Ubuntu%E4%B8%8Bntfs%E7%A1%AC%E7%9B%98%E5%8F%AA%E8%AF%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Ubuntu挂载ntfs格式的硬盘后可以读取，无法写入</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>打开日志,查看插入硬盘（U）盘后的日志,根据日志修复，下方是通用方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/log/syslog</span><br></pre></td></tr></table></figure></li><li><p>查看挂载位置,并记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"><span class="meta">#</span> 或</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure></li><li><p>卸载挂载,以sdb1为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sdb1</span><br></pre></td></tr></table></figure></li><li><p>修复，安装ntfsfix</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ntfsfix</span><br><span class="line">netsfix /dev/sdb1</span><br></pre></td></tr></table></figure></li></ol><p>附：有一种可能是Windows系统盘休眠导致的，需要将硬盘连接Windows,关闭休眠功能并正常关机后再连接Ubuntu</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 疑难 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法基础</title>
      <link href="2019/10/09/MarkDown%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>2019/10/09/MarkDown%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Markdown基础语法</p><p>新搭建好了博客,编辑内容时,需要标点和相关格式,hexo支持markdown语法.于是记录一下</p><a id="more"></a><p>标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><p>单行代码<br><code></code>echo “hello world”`<br>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`echo &quot;hello world&quot;`</span><br><span class="line">`echo &quot;This is markdown&quot;`</span><br></pre></td></tr></table></figure><p>粗体斜体删除线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*斜体*或_斜体_</span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体***</span><br><span class="line">~删除线~~</span><br></pre></td></tr></table></figure><p>列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表1</span><br><span class="line">2. 有序列表2</span><br><span class="line"></span><br><span class="line">- 无序列表</span><br><span class="line">- 无序列表</span><br></pre></td></tr></table></figure><p>超链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">行内式</span><br><span class="line">[HKCM](https://hkcm.github.io)</span><br><span class="line"></span><br><span class="line">直接式</span><br><span class="line">&lt;https://hkcm.github.io&gt;</span><br><span class="line"></span><br><span class="line">参考式</span><br><span class="line">这是我的个人博客[HKCM][1]</span><br><span class="line">[1]:https://hkcm.github.io</span><br></pre></td></tr></table></figure><p>锚点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">锚点只支持标题</span><br><span class="line">## 目录&#123;#index&#125;</span><br><span class="line"></span><br><span class="line">跳转到[目录](#index)</span><br></pre></td></tr></table></figure><p>图像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">行内式</span><br><span class="line">美丽花儿：</span><br><span class="line">![美丽花儿](http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg  &quot;美丽花儿&quot;)</span><br><span class="line"></span><br><span class="line">参考式</span><br><span class="line">美丽花儿：</span><br><span class="line">![美丽花儿][flower]</span><br><span class="line">[flower]:http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg  &quot;美丽花儿&quot;</span><br></pre></td></tr></table></figure><p>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在段落中填写[TOC]</span><br></pre></td></tr></table></figure><p>表格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">学号|姓名|分数</span><br><span class="line">-|-|-</span><br><span class="line">小明|男|75</span><br><span class="line">小红|女|79</span><br><span class="line">小陆|男|92</span><br></pre></td></tr></table></figure><p>最后附上Markdown中文官网链接: <a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">Markdown中文文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub搭建个人博客</title>
      <link href="2019/10/09/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2019/10/09/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>通过Github结合hexo搭建个人博客</p><a id="more"></a><p>环境: Ubuntu18.04<br>前置条件1: 注册github账号并设置ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/#github地址</span><br></pre></td></tr></table></figure><p>创建新仓库,仓库名必须为”username.github.io”(username必须为你的用户名)</p><p>获取Repository地址,必须为ssh的,后面有用,地址格式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure><p>配置ssh key,然后找到密钥文件将密钥添加到你的github配置文件中,并测试是否添加成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/.ssh#查看是否已有ssh key</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;#生成新的key</span><br><span class="line">cat ~/.ssh/id_rsa.pub#查看公钥并上传到github</span><br><span class="line">ssh -T git@github.com #测试是否添加成功(输入yes)</span><br><span class="line">git config --global user.name &quot;uesrname&quot;#配置用户名</span><br><span class="line">git config --global user.email &quot;youremail@example.com&quot;#配置邮箱</span><br></pre></td></tr></table></figure><p>前置条件2: 安装git和Node.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git#安装git</span><br><span class="line">sudo apt install Node.js#安装Node.js</span><br><span class="line">sudo apt install npm#安装npm</span><br><span class="line">npm install -g hexo-cli#安装hexo</span><br></pre></td></tr></table></figure><p>Node.js版本6.0以上,确认Node.js版本在v4时会出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node.js安装方式:</span><br><span class="line">https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04</span><br></pre></td></tr></table></figure><p>创建文件夹hexo,并做相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/hexo# 创建文件夹</span><br><span class="line">cd ~/hexo</span><br><span class="line">hexo init# 初始化</span><br><span class="line">hexo install# 安装依赖包(非必须)</span><br><span class="line">npm install hexo-deployer-git --save# 安装git插件</span><br></pre></td></tr></table></figure><p>修改hexo中的_config.yml文件deploy部分,注意”deploy:”后面有一个空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml#编辑配置文件</span><br><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:username/username.github.io.git#这里要用上文中提到的clone地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>尝试发布一篇新的博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~/hexo</span><br><span class="line">hexo new &quot;title&quot;#创建新文章,会在~/hexo/source/_posts目录下生成title.md文件</span><br><span class="line">vim source/_post/tile.md#编辑该文件内容即可</span><br><span class="line">hexo g -d#生成并发布</span><br><span class="line">hexo clean#清除当前缓存,尽量每次发布后执行一次</span><br></pre></td></tr></table></figure><p>以上github + hexo搭建个人博客相关配置就完成了,我们可以去username.github.io查看了</p><p>也可以进入到hexo目录下使用以下命令进行本地预览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人实践 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
